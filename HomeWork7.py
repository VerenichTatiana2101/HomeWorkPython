from functions import *

# Задача 34: Винни-Пух попросил Вас посмотреть, есть ли в его стихах ритм. Поскольку
# разобраться в его кричалках не настолько просто, насколько легко он их придумывает, Вам
# стоит написать программу. Винни-Пух считает, что ритм есть, если число слогов (т.е. число
# гласных букв) в каждой фразе стихотворения одинаковое. Фраза может состоять из одного
# слова, если во фразе несколько слов, то они разделяются дефисами. Фразы отделяются друг
# от друга пробелами. Стихотворение Винни-Пух вбивает в программу с клавиатуры. В ответе
# напишите “Парам пам-пам”, если с ритмом все в порядке и “Пам парам”, если с ритмом все не
# в порядке
# Ввод:                                                Вывод:
# пара-ра-рам рам-пам-папам па-ра-па-дам               Парам пам-пам


# text = input('Введите слово: ').lower()
text = "пара-ра-рам рам-пам-папам па-ра-па-дам "
vowels = 'аяуюоеёэиы'

# #без использования map и lambda
# vowels_count_1 = (rhyme(text, vowels))
# print(vowels_count_1)

# if all(i == vowels_count_1[0] for i in vowels_count_1):
#     print("Пам парам")
# else:
#     print("Парам пам-пам")

vowels_count = list(map(lambda phrase: sum(1 for i in phrase if i in vowels), text.split()))
print(vowels_count)

if all(i == vowels_count[0] for i in vowels_count):
    print("Пам парам")
else:
    print("Парам пам-пам")


# Задача 36: Напишите функцию print_operation_table(operation, num_rows=6, num_columns=6),
# которая принимает в качестве аргумента функцию, вычисляющую элемент по номеру строки и
# столбца. Аргументы num_rows и num_columns указывают число строк и столбцов таблицы,
# которые должны быть распечатаны. Нумерация строк и столбцов идет с единицы (подумайте,
# почему не с нуля). Примечание: бинарной операцией называется любая операция, у которой
# ровно два аргумента, как, например, у операции умножения.
# Ввод:                                                Вывод:
# print_operation_table(lambda x, y: x * y)             1    2    3    4    5    6
#                                                       2    4    6    8   10   12
#                                                       3    6    9   12   15   18
#                                                       4    8   12   16   20   24
#                                                       5   10   15   20   25   30
#                                                       6   12   18   24   30   36 

num_rows = int(input('Введите количество строк: '))
num_columns = int(input('Введите количество столбцов: '))

pifagor(num_rows, num_columns)
print('\n')

pifagor_map(num_rows, num_columns)
print('\n')

#при умножении не с нуля потому что первая строка и столбик будут заполнены нулями 
#при сложении с нуля актуально, но тогда нужно тоже добавлять единицу чтобы пользователю
#выводило сложение до введённого числа, он ведь не должен думать о том, что индексация с 0
# for i in range(num_rows + 1):
#     row = []
#     for j in range(num_columns + 1):
#         row.append(str((lambda x, y: x + y)(i,j)))
#     print('\t'.join(row))